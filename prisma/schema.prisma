// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum BookingType {
  DirectVisit
  VideoCall
  PhoneCall
  HomeVisit
}

enum DaysOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserRole {
  Therapist
  Admin
  Patient
}

enum BookingStatus {
  Pending
  Confirmed
  InProgress
  Completed
  Cancelled
  NoShow
}

// Models
model User {
  id                String     @id @default(cuid())
  email             String     @unique
  supabaseId        String     @unique
  firstname         String
  lastname          String
  avatar            String?
  role              UserRole[]
  therapistBookings Booking[]  @relation("TherapistBookings")
  patientBookings   Booking[]  @relation("PatientBookings")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("users")
}

model Location {
  id            String          @id @default(cuid())
  address       String
  logo          String?
  title         String
  description   String?
  lat           Float?
  lon           Float?
  timezone      String          @default("America/Los_Angeles")
  businessHours BusinessHours[]
  bookings      Booking[]
  overrides     DateOverride[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("locations")
}

model BusinessHours {
  id         String     @id @default(cuid())
  dayOfWeek  DaysOfWeek
  locationId String
  isActive   Boolean    @default(true)
  location   Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  timeSlots  TimeSlot[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([locationId, dayOfWeek])
  @@map("business_hours")
}

model TimeSlot {
  id              String        @id @default(cuid())
  startTime       String // Formato HH:MM
  endTime         String // Formato HH:MM
  isActive        Boolean       @default(true)
  businessHoursId String
  businessHours   BusinessHours @relation(fields: [businessHoursId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([businessHoursId, startTime, endTime])
  @@map("time_slots")
}

// Overrides de fechas específicas o rangos para una ubicación
model DateOverride {
  id         String             @id @default(cuid())
  locationId String
  location   Location           @relation(fields: [locationId], references: [id], onDelete: Cascade)
  // Rango de fechas inclusivo en zona del servidor (se interpreta por día)
  startDate  DateTime
  endDate    DateTime
  // Si true, el/los días quedan cerrados sin disponibilidad
  isClosed   Boolean            @default(true)
  reason     String?
  timeSlots  OverrideTimeSlot[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([locationId, startDate, endDate])
  @@map("date_overrides")
}

model OverrideTimeSlot {
  id             String       @id @default(cuid())
  startTime      String // Formato HH:MM
  endTime        String // Formato HH:MM
  isActive       Boolean      @default(true)
  dateOverrideId String
  dateOverride   DateOverride @relation(fields: [dateOverrideId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([dateOverrideId, startTime, endTime])
  @@map("override_time_slots")
}

model Specialty {
  id          String    @id @default(cuid())
  name        String
  description String?
  services    Service[]
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("specialties")
}

model Service {
  id          String    @id @default(cuid())
  description String
  cost        Float
  duration    Int // Duración en minutos
  specialtyId String
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("services")
}

model Booking {
  id              String        @id @default(cuid())
  bookingType     BookingType
  locationId      String
  location        Location      @relation(fields: [locationId], references: [id])
  specialtyId     String?
  specialty       Specialty?    @relation(fields: [specialtyId], references: [id])
  serviceId       String?
  service         Service?      @relation(fields: [serviceId], references: [id])
  firstname       String
  lastname        String
  phone           String
  email           String
  givenConsent    Boolean       @default(false)
  therapistId     String?
  therapist       User?         @relation("TherapistBookings", fields: [therapistId], references: [id])
  patientId       String?
  patient         User?         @relation("PatientBookings", fields: [patientId], references: [id])
  bookingNotes    String?
  bookingSchedule DateTime // Fecha y hora de la cita
  status          BookingStatus @default(Pending)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([therapistId, bookingSchedule])
  @@index([patientId, bookingSchedule])
  @@index([status, bookingSchedule])
  @@map("bookings")
}
